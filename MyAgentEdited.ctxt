#BlueJ class context
comment0.params=game\ iAmRed
comment0.target=MyAgentEdited(Connect4Game,\ boolean)
comment0.text=\r\n\ Constructs\ a\ new\ agent,\ giving\ it\ the\ game\ and\ telling\ it\ whether\ it\ is\ Red\ or\ Yellow.\r\n\ \r\n\ @param\ game\ The\ game\ the\ agent\ will\ be\ playing.\r\n\ @param\ iAmRed\ True\ if\ the\ agent\ is\ Red,\ False\ if\ the\ agent\ is\ Yellow.\r\n
comment1.params=
comment1.target=void\ move()
comment1.text=\r\n\ The\ move\ method\ is\ run\ every\ time\ it\ is\ this\ agent's\ turn\ in\ the\ game.\ You\ may\ assume\ that\r\n\ when\ move()\ is\ called,\ the\ game\ has\ at\ least\ one\ open\ slot\ for\ a\ token,\ and\ the\ game\ has\ not\r\n\ already\ been\ won.\r\n\ \r\n\ By\ the\ end\ of\ the\ move\ method,\ the\ agent\ should\ have\ placed\ one\ token\ into\ the\ game\ at\ some\r\n\ point.\r\n\ \r\n\ After\ the\ move()\ method\ is\ called,\ the\ game\ engine\ will\ check\ to\ make\ sure\ the\ move\ was\r\n\ valid.\ A\ move\ might\ be\ invalid\ if\:\r\n\ -\ No\ token\ was\ place\ into\ the\ game.\r\n\ -\ More\ than\ one\ token\ was\ placed\ into\ the\ game.\r\n\ -\ A\ previous\ token\ was\ removed\ from\ the\ game.\r\n\ -\ The\ color\ of\ a\ previous\ token\ was\ changed.\r\n\ -\ There\ are\ empty\ spaces\ below\ where\ the\ token\ was\ placed.\r\n\ \r\n\ If\ an\ invalid\ move\ is\ made,\ the\ game\ engine\ will\ announce\ it\ and\ the\ game\ will\ be\ ended.\r\n\ \r\n
comment10.params=
comment10.target=boolean\ isWin()
comment10.text=\r\n\ Checks\ if\ there\ is\ a\ win\ in\ the\ current\ game\ state\r\n\ \r\n\ @return\ Boolean\ true\ if\ there\ is\ a\ win\ ,\ else\ false\r\n
comment11.params=rmove
comment11.target=boolean\ isPerfectRandMove(int)
comment11.text=\r\n\ Checks\ whether\ the\ random\ move\ (random\ column)\ creates\ a\ situation\ where\ the\ opponent\ can\ win\ or\ not\r\n\ \r\n\ @param\ rmove\ A\ random\ Move\r\n\ \r\n\ @return\ Boolean\ true\ if\ there\ is\ no\ win\ for\ the\ opponent\ ,\ else\ false\r\n
comment12.params=
comment12.target=boolean\ isBoardEmpty()
comment13.params=
comment13.target=int\ doubleTrickMove()
comment13.text=\r\n\ Checks\ if\ there\ exists\ a\ Double\ Win\ state\r\n\ \r\n\ @return\ Int\ -\ if\ No\ Double\ Win\ state\ ,\ else\ the\ column\ where\ the\ Doule\ win\ state\ exists\r\n
comment14.params=
comment14.target=java.lang.String\ getName()
comment14.text=\r\n\ Returns\ the\ name\ of\ this\ agent.\r\n\r\n\ @return\ the\ agent's\ name\r\n
comment2.params=columnNumber
comment2.target=void\ moveOnColumn(int)
comment2.text=\r\n\ Drops\ a\ token\ into\ a\ particular\ column\ so\ that\ it\ will\ fall\ to\ the\ bottom\ of\ the\ column.\r\n\ If\ the\ column\ is\ already\ full,\ nothing\ will\ change.\r\n\ \r\n\ @param\ columnNumber\ The\ column\ into\ which\ to\ drop\ the\ token.\r\n
comment3.params=column
comment3.target=int\ getLowestEmptyIndex(Connect4Column)
comment3.text=\r\n\ Returns\ the\ index\ of\ the\ top\ empty\ slot\ in\ a\ particular\ column.\r\n\ \r\n\ @param\ column\ The\ column\ to\ check.\r\n\ @return\ the\ index\ of\ the\ top\ empty\ slot\ in\ a\ particular\ column;\ -1\ if\ the\ column\ is\ already\ full.\r\n
comment4.params=
comment4.target=int\ randomMove()
comment4.text=\r\n\ Returns\ a\ random\ valid\ move.\ If\ your\ agent\ doesn't\ know\ what\ to\ do,\ making\ a\ random\ move\r\n\ can\ allow\ the\ game\ to\ go\ on\ anyway.\r\n\ \r\n\ @return\ a\ random\ valid\ move.\r\n
comment5.params=
comment5.target=int\ iCanWin()
comment5.text=\r\n\ Returns\ the\ column\ that\ would\ allow\ the\ agent\ to\ win.\r\n\ \r\n\ You\ might\ want\ your\ agent\ to\ check\ to\ see\ if\ it\ has\ a\ winning\ move\ available\ to\ it\ so\ that\r\n\ it\ can\ go\ ahead\ and\ make\ that\ move.\ Implement\ this\ method\ to\ return\ what\ column\ would\r\n\ allow\ the\ agent\ to\ win.\r\n\r\n\ @return\ the\ column\ that\ would\ allow\ the\ agent\ to\ win.\r\n
comment6.params=
comment6.target=int\ theyCanWin()
comment6.text=\r\n\ Returns\ the\ column\ that\ would\ allow\ the\ opponent\ to\ win.\r\n\ \r\n\ You\ might\ want\ your\ agent\ to\ check\ to\ see\ if\ the\ opponent\ would\ have\ any\ winning\ moves\r\n\ available\ so\ your\ agent\ can\ block\ them.\ Implement\ this\ method\ to\ return\ what\ column\ should\r\n\ be\ blocked\ to\ prevent\ the\ opponent\ from\ winning.\r\n\r\n\ @return\ the\ column\ that\ would\ allow\ the\ opponent\ to\ win.\r\n
comment7.params=row\ col
comment7.target=Connect4Slot\ slotAtIJ(int,\ int)
comment7.text=\r\n\ Takes\ the\ row\ and\ col,\ and\ return\ the\ slot\ correspoding\ to\ it\r\n\ \r\n\ @param\ row\ The\ row\ of\ the\ demanded\ slot\r\n\ \r\n\ @param\ col\ The\ column\ of\ the\ demanded\ slot\r\n\ \r\n\ @return\ the\ Corespoding\ Slot\r\n
comment8.params=row\ col
comment8.target=boolean\ isValidMove(int,\ int)
comment8.text=\r\n\ Checks\ wether\ the\ move\ at\ given\ row\ and\ col\ is\ valid\ or\ not\r\n\ \r\n\ @param\ row\ The\ row\ of\ the\ slot\r\n\ \r\n\ @param\ Col\ The\ column\ of\ the\ slot\r\n\ \r\n\ @return\ Boolean\ true\ if\ the\ move\ is\ valid\ ,\ else\ false\r\n
comment9.params=Slot1\ Slot2
comment9.target=boolean\ areSlotsEqual(Connect4Slot,\ Connect4Slot)
comment9.text=\r\n\ Checks\ that\ the\ given\ slots\ are\ filled\ with\ same\ color\r\n\ \r\n\ @param\ Slot1\ First\ slot\ to\ be\ compared\r\n\ \r\n\ @param\ Slot2\ Second\ slot\ to\ be\ compared\r\n\ \r\n\ @return\ Boolean\ ,\ true\ if\ they\ are\ equal\ ,\ else\ false\r\n
numComments=15
